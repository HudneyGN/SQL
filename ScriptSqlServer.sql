/* USANDO UM BANDO DE DADOS */

USE EMPRESA
GO

/*CRIAÇÃO DE TABELA */

CREATE TABLE ALUNO(
	IDALUNO INT PRIMARY KEY IDENTITY ,
	NOME VARCHAR(30) NOT NULL, 
	SEXO CHAR(1) NOT NULL,
	NASCIMENTO DATE NOT NULL,
	EMAIL VARCHAR(30) UNIQUE
)
GO 
/* CRIAR  AS CONSTRAINTS FORA DA TABELA (PARA CRIAR COM NOME PARA O DICIONÁRIO DEDADOS)*/ 

/* CONSTRANT*/
ALTER TABLE ALUNO
ADD CONSTRAINT CK_SEXO CHECK (SEXO IN('M', 'F')) /* CK VEM DE CHECK */ 
GO

/* RELACIONAMENTO 1 PARA 1 */
CREATE TABLE ENDERECO(
	IDENDERECO INT PRIMARY KEY IDENTITY(100,10),
	BAIRRO VARCHAR(30),
	UF CHAR(2) NOT NULL,
	CHECK (UF IN('RJ','SP','MG')),
	ID_ALUNO INT 
)
GO 

/* CRIANDO A FOREIGN KEY*/
ALTER TABLE ENDERECO ADD CONSTRAINT FK_ENDERECO
FOREIGN KEY(ID_ALUNO) REFERENCES ALUNO (IDALUNO)
GO

/* COMASNDO DE DESCRIÇÃO 
NO MY SQL DESC, SHOW TABLES SQL SERVER FUNCIONA COM 
PROCEDURES - JÁ CRIADAS. TODO COMANDO COMEÇA COM SP_STORAGE PROCEDURE*/

 SP_COLUMNS ALUNO
 GO

SP_HELP ALUNO
GO

/* INSERINDO DADOS */

INSERT INTO ALUNO VALUES('ANDRE','M', '1981/12/09', 'ANDRE@IG.COM')
INSERT INTO ALUNO VALUES('ANA','F', '1978/03/10', 'ANA@IG.COM')
INSERT INTO ALUNO VALUES('RUI','M', '1961/07/20', 'RUI@IG.COM')
INSERT INTO ALUNO VALUES('JOAO','M', '2002/11/03', 'JOAO@IG.COM')
GO

INSERT INTO ENDERECO VALUES('FLAMENGO', 'RJ', 1)
INSERT INTO ENDERECO VALUES('MORUMBI', 'SP', 2)
INSERT INTO ENDERECO VALUES('CENTRO', 'MG', 4)
INSERT INTO ENDERECO VALUES('CENTRO', 'SP', 6)
GO

/* TABELA TELEFONE 1 X N */
CREATE TABLE TELEFONE (
	IDTELEFONE INT PRIMARY KEY IDENTITY,
	TIPO CHAR(3) NOT NULL,
	NUMERO VARCHAR(10) NOT NULL,
	ID_ALUNO INT,
	CHECK (TIPO IN('RES', 'COM', 'CEL'))
)
GO

ALTER TABLE TELEFONE ADD CONSTRAINT FK_ETELEFONE
FOREIGN KEY(ID_ALUNO) REFERENCES ALUNO (IDALUNO)
GO

INSERT INTO TELEFONE VALUES('CEL', '234355445',1)
INSERT INTO TELEFONE VALUES('RES', '576464647',1)
INSERT INTO TELEFONE VALUES('COM', '333536373',2)
INSERT INTO TELEFONE VALUES('CEL', '338873737',2)
GO

SELECT * FROM ALUNO

/*PEGAR A DATA ATUAL DO SISTEMA*/
SELECT GETDATE()
GO

/*cLAUSULA AMBIGUA */
SELECT  A.NOME, 
		ISNULL(T.TIPO, 'SEM') AS "TIPO", /*IFNULL*/
		ISNULL(T.NUMERO, 'NUMERO') AS "TELEFONE", 
		E.BAIRRO,
		E.UF
FROM ALUNO A
LEFT JOIN TELEFONE T
ON A.IDALUNO = T.ID_ALUNO
INNER JOIN ENDERECO E
ON A.IDALUNO = E.ID_ALUNO
GO 

/*DATAS*/

SELECT * FROM ALUNO
GO
SELECT NOME, NASCIMENTO
FROM ALUNO
GO

/* DATADIFF - CALCULA DIFERENÇA ENTRE DUAS DATAS 
- FUNÇÃO GETDATE() TRÁS DIA E HORA
*/

SELECT NOME, GETDATE() AS DIA_HORA FROM ALUNO
GO

/* 1 PASSO*/
SELECT NOME, DATEDIFF(DAY, NASCIMENTO, GETDATE())
FROM ALUNO
GO

/* 2 PASSO */
SELECT NOME, DATEDIFF(DAY, NASCIMENTO, GETDATE()) AS "IDADE" /*(SEM O AS TAMBÉM FUNCIONA) */
FROM ALUNO
GO

/* FUÑÇÃO GETDATE(), RETORNA O TIPO DATETIME*/
/* FUÑÇÃO DATEDIFF(), RETORNA O TIPO INT */

/* 3 PASSO RETORNO EM INTEIRO + OPERADOR MATEMÁTICA*/
/* EM DIAS */
SELECT NOME, (DATEDIFF(DAY, NASCIMENTO, GETDATE())/365) AS "IDADE" /*(SEM O AS TAMBÉM FUNCIONA) */
FROM ALUNO
GO

/*POR MÊS*/
SELECT NOME, (DATEDIFF(MONTH, NASCIMENTO, GETDATE())/12) AS "IDADE" /*(SEM O AS TAMBÉM FUNCIONA) */
FROM ALUNO
GO

/*POR ANO*/
SELECT NOME, DATEDIFF(YEAR, NASCIMENTO, GETDATE()) AS "IDADE" /*(SEM O AS TAMBÉM FUNCIONA) */
FROM ALUNO /*CALCULO NÃO FOI PRECIO*/
GO

/* FUNÇÃO DATENAME - TRAZ O NOME(string) DA PARTE DA DATA EM QUESTÃO*/
SELECT NOME, DATENAME(DAY, NASCIMENTO)
FROM ALUNO
GO

SELECT NOME, DATENAME(WEEKDAY, NASCIMENTO)
FROM ALUNO
GO

SELECT NOME, DATENAME(WEEK, NASCIMENTO)
FROM ALUNO
GO

SELECT NOME, DATENAME(MONTH, NASCIMENTO)
FROM ALUNO
GO

SELECT NOME, DATENAME(YEAR, NASCIMENTO)
FROM ALUNO
GO

/* DATEPART - PORÉM O RETORNO É UM INTEIRO*/
SELECT NOME, DATEPART(MONTH, NASCIMENTO)
FROM ALUNO
GO

/*MESCLANDO AS FUNÇÕES*/
SELECT NOME, DATEPART(MONTH, NASCIMENTO), DATENAME(YEAR, NASCIMENTO)
FROM ALUNO
GO

/*DATEADD - RETORNA UMA DATA SOMANDO A OUTRA DATA */
SELECT DATEADD(DAY,365,GETDATE())
GO

/* CONVERSÃO DE DADOS*/
SELECT 1 + '1'
GO
SELECT '1' + '1'
GO

/* FUNÇÕES DE CONVERSÃO DE DADOS*/
SELECT CAST('1' AS INT) + CAST('1' AS INT) --CONVERTE PARA INTEIRO
GO

/* CONVERSÃO E CONCATENAÇÃO 
https://learn.microsoft.com/en-us/sql/t-sql/data-types/data-type-conversion-database-engine?view=sql-server-ver16
*/
SELECT NOME, -- DATA PADRÃO SQL (AMERICANO)
NASCIMENTO
FROM ALUNO
GO

SELECT NOME, -- CONVERTENDO PARA EXIBIR PADÃO BRASILEIRO
  CAST(DAY(NASCIMENTO) AS VARCHAR) + '/'
+ CAST(MONTH(NASCIMENTO) AS VARCHAR) + '/' 
+ CAST(YEAR(NASCIMENTO) AS VARCHAR) AS "NASCIMENTO"
FROM ALUNO
GO

/*FUNÇÃO CHARINDEX - RETORNA UM INTEIRO RETURN DE UMA EXPRESSÃO*/
SELECT NOME, CHARINDEX('A',NOME) AS INDICE
FROM ALUNO
GO

SELECT NOME, CHARINDEX('A',NOME,2) AS INDICE
FROM ALUNO
GO

/*FUNÇÃO BULK INSERT - IMPORTAÇÃO DE ARQUIVOS */
CREATE TABLE LANCAMENTO_CONTABIL(
	CONTA INT,
	VALOR INT,
	DEB_CRED CHAR(1)
)
GO
BULK INSERT LANCAMENTO_CONTABIL
FROM 'E:\Cursos\Udemy\Banco-de-Dados\SQLServer\CONTAS.txt'
WITH
(
	FIRSTROW = 2,
	DATAFILETYPE = 'CHAR',
	FIELDTERMINATOR = '\t',-- \T = TAB
	ROWTERMINATOR = '\n'
)
GO

SELECT * FROM LANCAMENTO_CONTABIL
GO

DELETE FROM LANCAMENTO_CONTABIL
GO

/*DESAFIO DO SALDO
 UMA QUARY QUE TRAGA O NÚMERO DA CONTA
 SALDO - DEVEDOR OU CREDOR
*/
SELECT CONTA, VALOR, DEB_CRED,
CHARINDEX('D',DEB_CRED) AS "DEBITO",
CHARINDEX('C',DEB_CRED) AS "CREDITO",
CHARINDEX('C',DEB_CRED) * 2 - 1 AS "MULTIPLICADOR"
FROM LANCAMENTO_CONTABIL
GO

SELECT CONTA,
SUM(VALOR * (CHARINDEX('C', DEB_CRED)*2 - 1)) AS "SALDO"
FROM LANCAMENTO_CONTABIL
GROUP BY CONTA
GO



